/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RecipesIndexRouteImport } from './routes/recipes/index'
import { Route as RecipesRecipeIdRouteImport } from './routes/recipes/$recipeId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesIndexRoute = RecipesIndexRouteImport.update({
  id: '/recipes/',
  path: '/recipes/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesRecipeIdRoute = RecipesRecipeIdRouteImport.update({
  id: '/recipes/$recipeId',
  path: '/recipes/$recipeId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes': typeof RecipesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes': typeof RecipesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/': typeof RecipesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/settings' | '/recipes/$recipeId' | '/recipes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/recipes/$recipeId' | '/recipes'
  id: '__root__' | '/' | '/settings' | '/recipes/$recipeId' | '/recipes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRoute
  RecipesRecipeIdRoute: typeof RecipesRecipeIdRoute
  RecipesIndexRoute: typeof RecipesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/': {
      id: '/recipes/'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/$recipeId': {
      id: '/recipes/$recipeId'
      path: '/recipes/$recipeId'
      fullPath: '/recipes/$recipeId'
      preLoaderRoute: typeof RecipesRecipeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  RecipesRecipeIdRoute: RecipesRecipeIdRoute,
  RecipesIndexRoute: RecipesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
