name: Setup Raspberry Pi
on:
  workflow_dispatch:

jobs:
  bootstrap:
    runs-on: [self-hosted]
    outputs:
      needs-reboot: ${{ steps.check-reboot.outputs.needs-reboot }}
    steps:
      - name: Check current system
        run: |
          echo "=== System Information ==="
          echo "Device Model: $(cat /proc/device-tree/model 2>/dev/null || echo 'Unknown')"
          echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
          echo "Architecture: $(uname -m)"
          echo "Kernel: $(uname -r)"
          echo ""

      - name: Check current SPI status
        run: |
          echo "=== Current SPI Status ==="
          echo "SPI devices:"
          ls -la /dev/spidev* 2>/dev/null || echo "No SPI devices found"
          echo ""
          echo "SPI kernel modules:"
          lsmod | grep spi || echo "No SPI modules loaded"
          echo ""
          echo "SPI config in /boot/config.txt:"
          grep -i spi /boot/config.txt 2>/dev/null || echo "No SPI config found"
          echo ""

      - name: Install Docker
        run: |
          echo "Installing Docker..."

          # Check if Docker is already installed
          if command -v docker &> /dev/null; then
            echo "Docker is already installed:"
            docker --version
            echo "Skipping Docker installation"
          else
            echo "Docker not found, installing..."

            # Remove old versions
            sudo apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true

            # Update package index
            sudo apt-get update

            # Install prerequisites
            sudo apt-get install -y ca-certificates curl gnupg lsb-release

            # Add Docker's official GPG key (non-interactive)
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --batch --dearmor -o /etc/apt/keyrings/docker.gpg

            # Set up repository
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

            echo "Docker installed successfully"
          fi

      - name: Add user to docker group
        run: |
          USERNAME="$(id -un)"
          sudo usermod -aG docker "$USERNAME"
          echo "Added $USERNAME to docker group."

      - name: Enable SPI interface
        id: enable-spi
        run: |
          echo "=== Enabling SPI Interface ==="

          # Check if SPI is already enabled
          if grep -q "dtparam=spi=on" /boot/config.txt; then
            echo "SPI is already enabled in config.txt"
            echo "spi_already_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "Enabling SPI interface..."
            # Add SPI enable line to config.txt
            echo "dtparam=spi=on" | sudo tee -a /boot/config.txt
            echo "SPI interface enabled in config.txt"
            echo "spi_enabled=true" >> $GITHUB_OUTPUT
          fi

          # Also check for any existing SPI overlays
          echo "Current SPI-related config:"
          grep -i spi /boot/config.txt || echo "No SPI config found"

      - name: Enable I2C interface (optional, for future use)
        id: enable-i2c
        run: |
          echo "=== Enabling I2C Interface ==="

          # Check if I2C is already enabled
          if grep -q "dtparam=i2c_arm=on" /boot/config.txt; then
            echo "I2C is already enabled in config.txt"
            echo "i2c_already_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "Enabling I2C interface..."
            # Add I2C enable line to config.txt
            echo "dtparam=i2c_arm=on" | sudo tee -a /boot/config.txt
            echo "I2C interface enabled in config.txt"
            echo "i2c_enabled=true" >> $GITHUB_OUTPUT
          fi

      - name: Verify configuration changes
        run: |
          echo "=== Configuration Verification ==="
          echo "Current /boot/config.txt SPI and I2C settings:"
          grep -E "(spi|i2c)" /boot/config.txt || echo "No SPI/I2C settings found"
          echo ""
          echo "Full config.txt (last 20 lines):"
          tail -20 /boot/config.txt

      - name: Check current GPIO and SPI status
        run: |
          echo "=== Current Hardware Status ==="
          echo "GPIO chips available:"
          ls -la /sys/class/gpio/ 2>/dev/null || echo "GPIO sysfs not accessible"
          echo ""
          echo "SPI devices:"
          ls -la /dev/spidev* 2>/dev/null || echo "No SPI devices found (normal before reboot)"
          echo ""
          echo "I2C devices:"
          ls -la /dev/i2c* 2>/dev/null || echo "No I2C devices found (normal before reboot)"

      - name: Determine if reboot is needed
        id: check-reboot
        run: |
          echo "=== Checking if reboot is needed ==="

          # Check if any hardware interfaces were enabled
          SPI_ENABLED="${{ steps.enable-spi.outputs.spi_enabled }}"
          I2C_ENABLED="${{ steps.enable-i2c.outputs.i2c_enabled }}"

          # Check if SPI devices are missing (indicates need for reboot)
          SPI_DEVICES_MISSING=false
          if [ ! -e "/dev/spidev0.0" ] && [ ! -e "/dev/spidev0.1" ]; then
            SPI_DEVICES_MISSING=true
          fi

          # Check if I2C devices are missing
          I2C_DEVICES_MISSING=false
          if [ ! -e "/dev/i2c-1" ]; then
            I2C_DEVICES_MISSING=true
          fi

          # Determine if reboot is needed
          NEEDS_REBOOT=false
          REBOOT_REASONS=()

          if [ "$SPI_ENABLED" = "true" ]; then
            NEEDS_REBOOT=true
            REBOOT_REASONS+=("SPI was enabled")
          fi

          if [ "$I2C_ENABLED" = "true" ]; then
            NEEDS_REBOOT=true
            REBOOT_REASONS+=("I2C was enabled")
          fi

          if [ "$SPI_DEVICES_MISSING" = "true" ] && grep -q "dtparam=spi=on" /boot/config.txt; then
            NEEDS_REBOOT=true
            REBOOT_REASONS+=("SPI devices missing")
          fi

          if [ "$I2C_DEVICES_MISSING" = "true" ] && grep -q "dtparam=i2c_arm=on" /boot/config.txt; then
            NEEDS_REBOOT=true
            REBOOT_REASONS+=("I2C devices missing")
          fi

          # Set output
          if [ "$NEEDS_REBOOT" = "true" ]; then
            echo "needs-reboot=true" >> $GITHUB_OUTPUT
            echo "Reboot needed for: ${REBOOT_REASONS[*]}"
          else
            echo "needs-reboot=false" >> $GITHUB_OUTPUT
            echo "No reboot needed - all hardware interfaces are working"
          fi

      - name: Setup summary
        run: |
          echo "=============================================================="
          echo "Setup completed successfully!"
          echo ""
          if [ "${{ steps.check-reboot.outputs.needs-reboot }}" = "true" ]; then
            echo "REBOOT REQUIRED: Hardware interfaces need to be activated"
            echo "The Pi will reboot automatically in the next step."
          else
            echo "No reboot needed - everything is working!"
          fi
          echo ""
          echo "After setup, verify everything is working:"
          echo "  ls -la /dev/spidev*"
          echo "  lsmod | grep spi"
          echo "  docker --version"
          echo "=============================================================="

  reboot:
    runs-on: [self-hosted]
    needs: bootstrap
    if: needs.bootstrap.outputs.needs-reboot == 'true'
    continue-on-error: true
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Reboot Raspberry Pi
        uses: ./.github/actions/reboot-pi
        with:
          reason: "Hardware interfaces (SPI/I2C) were enabled. Rebooting to activate them."
          wait_seconds: "5"
