name: Deploy to Raspberry Pi
on:
  push:
    paths:
      - "frontend/**"
      - "deploy/systemd/**"
      - "api/**"
      - ".github/workflows/deploy-pi.yml"
      - ".github/actions/**"

jobs:
  determine-changes:
    runs-on: [self-hosted]
    outputs:
      frontend-should-run: ${{ steps.changes.outputs.frontend }}
      systemd-should-run: ${{ steps.changes.outputs.systemd }}
      api-should-run: ${{ steps.changes.outputs.api }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine what changed
        id: changes
        run: |
          # Get list of changed files using git diff
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          echo "Changed files: $CHANGED_FILES"

          # Check for frontend changes
          if echo "$CHANGED_FILES" | grep -q "frontend/" || \
             echo "$CHANGED_FILES" | grep -q "\.github/workflows/deploy-pi\.yml" || \
             echo "$CHANGED_FILES" | grep -q "\.github/actions/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

          # Check for systemd changes
          if echo "$CHANGED_FILES" | grep -q "deploy/systemd/" || \
             echo "$CHANGED_FILES" | grep -q "\.github/workflows/deploy-pi\.yml" || \
             echo "$CHANGED_FILES" | grep -q "\.github/actions/"; then
            echo "systemd=true" >> $GITHUB_OUTPUT
          else
            echo "systemd=false" >> $GITHUB_OUTPUT
          fi

          # Check for api changes
          if echo "$CHANGED_FILES" | grep -q "api/" || \
             echo "$CHANGED_FILES" | grep -q "\.github/workflows/deploy-pi\.yml" || \
             echo "$CHANGED_FILES" | grep -q "\.github/actions/"; then
            echo "api=true" >> $GITHUB_OUTPUT
          else
            echo "api=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug - Show commit info
        run: |
          echo "Commit SHA: ${{ github.sha }}"
          echo "Previous commit: ${{ github.event.before }}"
          echo "Current commit: ${{ github.event.after }}"
          echo ""
          echo "Modified files in this commit:"
          echo "${{ github.event.head_commit.modified }}"
          echo ""
          echo "Added files in this commit:"
          echo "${{ github.event.head_commit.added }}"
          echo ""
          echo "Removed files in this commit:"
          echo "${{ github.event.head_commit.removed }}"
          echo ""
          echo "Files changed between commits:"
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} || echo "Could not get diff"
          echo ""
          echo "=== Job Conditions ==="
          echo "FRONTEND_JOB_SHOULD_RUN: ${{ steps.changes.outputs.frontend }}"
          echo "SYSTEMD_JOB_SHOULD_RUN: ${{ steps.changes.outputs.systemd }}"
          echo "API_JOB_SHOULD_RUN: ${{ steps.changes.outputs.api }}"

  frontend:
    runs-on: [self-hosted]
    needs: determine-changes
    if: needs.determine-changes.outputs.frontend-should-run == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Convex and generate API
        working-directory: ./db
        run: |
          npm ci
          npx convex dev --once || npx convex codegen

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Install frontend build
        run: |
          sudo mkdir -p /home/smart-oven/frontend
          sudo cp -r ./frontend/dist/* /home/smart-oven/frontend/

  systemd:
    runs-on: [self-hosted]
    needs: determine-changes
    if: needs.determine-changes.outputs.systemd-should-run == 'true'
    steps:
      - name: Install/Update systemd units from repo
        run: |
          # Copy unit files from the repo into systemd dir
          sudo install -m 0644 deploy/systemd/smart-oven-api.service /etc/systemd/system/smart-oven-api.service
          sudo install -m 0644 deploy/systemd/smart-oven-web.service /etc/systemd/system/smart-oven-web.service
          sudo install -m 0644 deploy/systemd/smart-oven-display.service /etc/systemd/system/smart-oven-display.service
          sudo install -m 0644 deploy/systemd/github-runner.service /etc/systemd/system/github-runner.service

          # Pick chromium path if different:
          if [ -x /usr/bin/chromium ] && ! grep -q '/usr/bin/chromium ' /etc/systemd/system/smart-oven-display.service; then
            echo "Warning: chromium path might be /usr/bin/chromium on this system."
          fi

          # Reload & enable services
          sudo systemctl daemon-reload
          sudo systemctl enable smart-oven-api.service
          sudo systemctl enable smart-oven-web.service
          sudo systemctl enable smart-oven-display.service
          sudo systemctl enable github-runner.service

  api:
    runs-on: [self-hosted]
    needs: determine-changes
    if: needs.determine-changes.outputs.api-should-run == 'true'
    steps:
      - name: Restart API
        working-directory: ./api
        run: |
          docker compose down || true
          docker compose up -d --build

      - name: Wait for container to start
        run: |
          sleep 10

      - name: Show API logs
        working-directory: ./api
        run: |
          echo "=== API Container Logs ==="
          docker compose logs --tail=50 api || echo "Could not retrieve logs"
          echo "=== End API Container Logs ==="

      - name: Smoke test
        run: |
          curl -sSf http://127.0.0.1:8081/health

      - name: Display API endpoints
        run: |
          # Get Pi's IP address
          PI_IP=$(hostname -I | awk '{print $1}')

          echo "=========================================="
          echo "API is now accessible from external devices:"
          echo "http://$PI_IP:8081/"
          echo "=========================================="

  reboot:
    runs-on: [self-hosted]
    needs: [frontend, systemd, api]
    if: always() && needs.systemd.result == 'success'
    continue-on-error: true # Allow failure on this job
    timeout-minutes: 1 # Prevent hanging indefinitely
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Reboot Raspberry Pi
        uses: ./.github/actions/reboot-pi
        with:
          reason: "Systemd configuration changed. Rebooting Pi to restart all services with new configs."
          wait_seconds: "10"
